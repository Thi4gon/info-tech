{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared/utils/data.utils.service\";\nimport * as i2 from \"../shared/services/comunication.service\";\nimport * as i3 from \"./digital-clock/digital-clock.component\";\nimport * as i4 from \"@angular/material/slide-toggle\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/select\";\nimport * as i8 from \"@angular/material/core\";\n\nfunction ClockComponent_mat_optgroup_18_mat_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-option\", 11);\n    i0.ɵɵlistener(\"click\", function ClockComponent_mat_optgroup_18_mat_option_1_Template_mat_option_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const timezone_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return ctx_r5.startClock(timezone_r4.tz);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const timezone_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", timezone_r4.tz);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", timezone_r4.country.split(\"_\").join(\" \"), \" \");\n  }\n}\n\nfunction ClockComponent_mat_optgroup_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-optgroup\", 13);\n    i0.ɵɵtemplate(1, ClockComponent_mat_optgroup_18_mat_option_1_Template, 2, 2, \"mat-option\", 14);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tz_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"label\", tz_r2.continent);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", tz_r2.newRow);\n  }\n}\n\nexport let ClockComponent = /*#__PURE__*/(() => {\n  class ClockComponent {\n    constructor(dataUtils, elementRef, comunicationService) {\n      var _a;\n\n      this.dataUtils = dataUtils;\n      this.elementRef = elementRef;\n      this.comunicationService = comunicationService;\n      this.markerPosition = 0;\n      this.isChecked = false;\n      this.timeZones = (_a = this.dataUtils) === null || _a === void 0 ? void 0 : _a.getAllTimezone();\n      this.timeZoneBckup = '';\n      this.currentTimeZone = new Date();\n      this.isDarkTheme = false;\n      this.className = '';\n      this.darkClassName = 'theme-dark';\n      this.lightClassName = 'theme-light';\n    }\n\n    ngOnInit() {\n      this.checkPreviusTz();\n      this.checkPreviusTheme();\n    }\n\n    checkPreviusTheme() {\n      const currentTheme = localStorage.getItem('currentTheme');\n\n      if (currentTheme === 'dark') {\n        this.isDarkTheme = true;\n        this.onChangeToogle({\n          checked: true,\n          source: {}\n        }); // this.slider.nativeElement.click();\n\n        return;\n      }\n\n      this.isDarkTheme = false;\n      this.onChangeToogle({\n        checked: false,\n        source: {}\n      });\n    }\n\n    checkPreviusTz() {\n      const currentTz = localStorage.getItem('currentTz');\n\n      if (currentTz) {\n        this.startClock(currentTz);\n        this.setPickedValue(currentTz);\n      } else {\n        this.startClock('');\n        this.setPickedValue('');\n      }\n    }\n\n    setPickedValue(tz) {\n      this.valorSelecionado = tz;\n    }\n\n    saveTzStorage(tz) {\n      localStorage.setItem(\"currentTz\", tz);\n    }\n\n    saveTheme(isDark) {\n      localStorage.setItem(\"currentTheme\", isDark);\n    }\n\n    startClock(timeZone) {\n      this.startInterval(timeZone);\n      this.setTimeZoneBckup(timeZone);\n    }\n\n    startInterval(timeZone) {\n      this.saveTzStorage(timeZone); //check if have some interval running\n\n      this.checkIfHaveInterval(); //start interval\n\n      this.interval = setInterval(() => {\n        //if Have timezone comming from screen\n        if (timeZone) {\n          this.getChoosedTimeZone(timeZone);\n          return;\n        } // if don`t have timezone coming from screen ( go standard )\n\n\n        this.standardTimeZone();\n      }, 500);\n    }\n\n    getChoosedTimeZone(timeZone) {\n      let date = new Date();\n      const strTime = date.toLocaleString(\"en-US\", {\n        timeZone: `${timeZone}`\n      });\n      const datePicked = new Date(strTime);\n      this.setDate(datePicked);\n    }\n\n    standardTimeZone() {\n      let date = new Date();\n      this.setDate(date);\n    }\n\n    stopInterval() {\n      clearInterval(this.interval);\n    }\n\n    setDate(date) {\n      this.clickedDate = date;\n      this.comunicationService.sendNextDate(date);\n      this.updateMarkerPosition(date);\n    }\n\n    setTimeZoneBckup(time) {\n      if (time) {\n        this.timeZoneBckup = time;\n        return;\n      }\n\n      this.timeZoneBckup = new Date() + '';\n    }\n\n    checkIfHaveInterval() {\n      if (this.timeZoneBckup) {\n        this.stopInterval();\n      }\n    }\n\n    updateMarkerPosition(date) {\n      const dayHours = 24;\n      const hourMinutes = 60;\n      const totalDayMinutes = dayHours * hourMinutes; //get the marker value. ( current hour(in minutes) + minutes )\n\n      const actualMarkerValue = date.getHours() * hourMinutes + date.getMinutes(); //get the marker position in percentage\n\n      this.markerPosition = actualMarkerValue / totalDayMinutes * 100;\n    }\n\n    onChangeToogle($event) {\n      console.log($event);\n      this.isChecked = $event.checked;\n      this.setTheme(this.isChecked);\n\n      if (this.isChecked) {\n        this.saveTheme('dark');\n        this.setDarkColor();\n        return;\n      }\n\n      this.saveTheme('light');\n      this.setWhiteColor();\n    }\n\n    setTheme(isChecked) {\n      this.className = isChecked ? this.darkClassName : this.lightClassName;\n    }\n\n    setDarkColor() {\n      this.elementRef.nativeElement.ownerDocument.body.style.backgroundColor = 'black';\n      console.log(\"veio aqui\");\n      const timeline = document.getElementById('timeline');\n      timeline.style.backgroundColor = '#140a54';\n      const marker = document.getElementById('marker');\n      marker.style.backgroundColor = 'blue';\n      this.comunicationService.sendDarkmode(true);\n    }\n\n    setWhiteColor() {\n      this.elementRef.nativeElement.ownerDocument.body.style.backgroundColor = '#fff';\n      const timeline = document.getElementById('timeline');\n      timeline.style.backgroundColor = '#f0f0f0';\n      const marker = document.getElementById('marker');\n      marker.style.backgroundColor = 'steelBlue';\n      this.comunicationService.sendDarkmode(false);\n    }\n\n  }\n\n  ClockComponent.ɵfac = function ClockComponent_Factory(t) {\n    return new (t || ClockComponent)(i0.ɵɵdirectiveInject(i1.DataUtilsService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.ComunicationService));\n  };\n\n  ClockComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ClockComponent,\n    selectors: [[\"app-clock\"]],\n    hostVars: 2,\n    hostBindings: function ClockComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.className);\n      }\n    },\n    decls: 19,\n    vars: 7,\n    consts: [[\"id\", \"slider\", 1, \"mb-4\", \"toogle\"], [\"slider\", \"\"], [\"color\", \"primary\", 3, \"checked\", \"change\"], [3, \"ngClass\"], [\"id\", \"app\"], [\"id\", \"timeline\"], [\"id\", \"marker\"], [1, \"container\", \"mt-4\"], [1, \"row\"], [\"appearance\", \"fill\", 1, \"container\"], [3, \"value\", \"valueChange\"], [3, \"value\", \"click\"], [3, \"label\", 4, \"ngFor\", \"ngForOf\"], [3, \"label\"], [3, \"value\", \"click\", 4, \"ngFor\", \"ngForOf\"]],\n    template: function ClockComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-digital-clock\");\n        i0.ɵɵelementStart(1, \"div\", 0, 1);\n        i0.ɵɵelementStart(3, \"mat-slide-toggle\", 2);\n        i0.ɵɵlistener(\"change\", function ClockComponent_Template_mat_slide_toggle_change_3_listener($event) {\n          return ctx.onChangeToogle($event);\n        });\n        i0.ɵɵelementStart(4, \"span\", 3);\n        i0.ɵɵtext(5, \" Dark theme \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵelementStart(7, \"div\", 5);\n        i0.ɵɵelement(8, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵelementStart(10, \"div\", 8);\n        i0.ɵɵelementStart(11, \"div\");\n        i0.ɵɵelementStart(12, \"mat-form-field\", 9);\n        i0.ɵɵelementStart(13, \"mat-label\");\n        i0.ɵɵtext(14, \"TimeZone\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"mat-select\", 10);\n        i0.ɵɵlistener(\"valueChange\", function ClockComponent_Template_mat_select_valueChange_15_listener($event) {\n          return ctx.valorSelecionado = $event;\n        });\n        i0.ɵɵelementStart(16, \"mat-option\", 11);\n        i0.ɵɵlistener(\"click\", function ClockComponent_Template_mat_option_click_16_listener() {\n          return ctx.startClock(\"\");\n        });\n        i0.ɵɵtext(17, \"local\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(18, ClockComponent_mat_optgroup_18_Template, 2, 2, \"mat-optgroup\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"checked\", ctx.isDarkTheme);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", ctx.isChecked == true ? \"textWhite\" : \"textBlack\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵstyleProp(\"left\", ctx.markerPosition, \"%\");\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"value\", ctx.valorSelecionado);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.timeZones);\n      }\n    },\n    directives: [i3.DigitalClockComponent, i4.MatSlideToggle, i5.NgClass, i6.MatFormField, i6.MatLabel, i7.MatSelect, i8.MatOption, i5.NgForOf, i8.MatOptgroup],\n    styles: [\"#app[_ngcontent-%COMP%]{height:20px;background-color:#f0f0f0;position:relative;overflow-x:hidden;margin:2px}#timeline[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;display:flex;align-items:center}#marker[_ngcontent-%COMP%]{height:20px;width:20px;border-radius:50%;background-color:#4682b4;position:absolute;transform:translate(-50%)}.textWhite[_ngcontent-%COMP%]{color:#fff}.textBlack[_ngcontent-%COMP%]{color:#000}.toogle[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center}\"]\n  });\n  return ClockComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}